1-1-1. 이때, 도커 이미지를 build 하는 명령어는 무엇인가요?
docker build .
1-1-2. 위 1번에서 build 한 이미지를 확인하는 명령어는 무엇인가요?
docker images

1-2-1. 해당 이미지를 실행하는 명령어는 무엇인가요?
docker run 2e7a05ce7683

1-2-2. 1. 도커로 해당 이미지를 실행하면 도커 컨테이너가 실행됩니다.
도커 컨테이너는 무한 루프를 돌거나, 서버와 같이 24시간 listen 하지 않는 경우 실행이 끝나면 자동으로 종료됩니다.
여기서, 현재 실행 중인 도커 컨테이너의 목록을 보는 명령어가  `> docker ps`  일 때,
종료된 컨테이너를 포함한 모든 컨테이너의 목록을 보는 명령어는 무엇인가요?
docker ps -aq

1-2-3. 실행 중인 컨테이너를 중지하는 명령어는 무엇인가요?
docker stop 2e7a05ce7683

1-2-4. 종료된 컨테이너를 삭제하는 명령어는 무엇인가요?
docker rm [CONTAINER ID]
docker rm $(docker ps -aq)  // 윈도우의 경우 이 명령어, 다른 운영체제는 다른 형식!

1-2-5. 이미지를 삭제하는 명령어는 무엇인가요?
docker image rm [IMAGE ID]
docker rmi $(docker images -q)

1-3-1.엔드 포인트를 제대로 수정해 주세요. [GET - http://localhost:2000/boards]
http://localhost:3000/boards

1-3-2.영희의 고집이 너무 세서 위 1번의 요청을 반드시 보내야겠다고 합니다.
이에 따라, 철수가 실행 중인 도커를 중단하고 포트포워딩을 좀 수정해서 다시 도커를 실행해 주려고 합니다.
철수는 어떻게 도커를 실행해야 할까요?
docker run -p 2000:3000 2e7a05ce7683 

1-3-3. 위 2번에 이어서, 철수가 소스코드를 아래와 같이 수정했다면, 철수는 어떻게 도커를 실행해야 할까요?
docker run -p 8000:3000 2e7a05ce7683 

1-4-1. 해당 도커 내부에 접속하는 명령어는 무엇인가요?
docker exec -it 2bd25dc4230a /bin/bash                  

1-4-2. vscode에서 `index.js`의 파일을 약간 수정하였습니다.
이때, 도커 내부의 파일도 수정이 될까요?
아니요. docker build . 을 다시 하지 않는 한 수정되지 않습니다.

1-4-3. vscode에서 yarn add 명령을 이용하여 특정 패키지를 하나 설치하였습니다.
이때, 도커 내부에도 패키지가 설치될까요?
아니요. docker build . 을 다시 하지 않는 한 수정되지 않습니다.

2-1.
Dockerfile01의 경우, 비효율적인 빌드이다.
Docker의 경우, 캐시가 깨지게 되면 다시 다운받게 되는데,
Dockerfile01의 경우 설치를 아래 부분에서 진행하여 COPY ./my_backend/ 라는 명령어를 통해
이미 캐시가 깨지게 된 상태에서 yarn install을 하니 바뀌지 않아 캐시를 이용할 수 있음에도 다시 새로 다 다운받아 비효율적인 빌드가 된다.
Dockerfile02의 경우, packages.json과 yarn.lock 파일(node_modules 관련 파일)을 미리 복사하여
캐시가 깨지지 않았다면(바뀐 것이 없다면) 아무것도 하지 않고 넘어간 후 아래 소스코드를 복사하게 된다.
그렇다면 node_modules를 다시 새로 다운받을 필요가 없을 때는 다운받지 않는 효율적인 빌드를 진행할 수 있게 된다.